-- =====================================================
-- SCRIPT PARA CREAR TABLAS DE BIBLIOTECA VIRTUAL
-- =====================================================
-- Ejecutar en Oracle Database
-- sqlplus usuario/password@database @crear_tablas_biblioteca.sql

-- =====================================================
-- TABLA: USUARIOS
-- =====================================================

CREATE TABLE usuarios (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(100) NOT NULL,
    correo VARCHAR2(100) UNIQUE NOT NULL,
    contraseña VARCHAR2(100) NOT NULL,
    rol VARCHAR2(20) CHECK (rol IN ('USUARIO', 'BIBLIOTECARIO')) NOT NULL
);

-- Comentarios para la tabla usuarios
COMMENT ON TABLE usuarios IS 'Tabla para almacenar información de usuarios de la biblioteca';
COMMENT ON COLUMN usuarios.id IS 'Identificador único del usuario';
COMMENT ON COLUMN usuarios.nombre IS 'Nombre completo del usuario';
COMMENT ON COLUMN usuarios.correo IS 'Correo electrónico único del usuario';
COMMENT ON COLUMN usuarios.contraseña IS 'Contraseña del usuario';
COMMENT ON COLUMN usuarios.rol IS 'Rol del usuario: USUARIO o BIBLIOTECARIO';

-- =====================================================
-- TABLA: LIBROS
-- =====================================================

CREATE TABLE libros (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    titulo VARCHAR2(200) NOT NULL,
    autor VARCHAR2(100),
    categoria VARCHAR2(100),
    stock NUMBER DEFAULT 1 CHECK (stock >= 0)
);

-- Comentarios para la tabla libros
COMMENT ON TABLE libros IS 'Tabla para almacenar información de libros de la biblioteca';
COMMENT ON COLUMN libros.id IS 'Identificador único del libro';
COMMENT ON COLUMN libros.titulo IS 'Título del libro';
COMMENT ON COLUMN libros.autor IS 'Autor del libro';
COMMENT ON COLUMN libros.categoria IS 'Categoría o género del libro';
COMMENT ON COLUMN libros.stock IS 'Cantidad de ejemplares disponibles';

-- =====================================================
-- TABLA: PRÉSTAMOS
-- =====================================================

CREATE TABLE prestamos (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_usuario NUMBER NOT NULL,
    id_libro NUMBER NOT NULL,
    fecha_prestamo DATE DEFAULT SYSDATE,
    fecha_devolucion DATE,
    estado VARCHAR2(20) DEFAULT 'ACTIVO' CHECK (estado IN ('ACTIVO', 'DEVUELTO', 'VENCIDO')),
    
    CONSTRAINT fk_prestamo_usuario FOREIGN KEY (id_usuario) REFERENCES usuarios(id),
    CONSTRAINT fk_prestamo_libro FOREIGN KEY (id_libro) REFERENCES libros(id)
);

-- Comentarios para la tabla prestamos
COMMENT ON TABLE prestamos IS 'Tabla para almacenar información de préstamos de libros';
COMMENT ON COLUMN prestamos.id IS 'Identificador único del préstamo';
COMMENT ON COLUMN prestamos.id_usuario IS 'Identificador del usuario que realizó el préstamo';
COMMENT ON COLUMN prestamos.id_libro IS 'Identificador del libro prestado';
COMMENT ON COLUMN prestamos.fecha_prestamo IS 'Fecha en que se realizó el préstamo';
COMMENT ON COLUMN prestamos.fecha_devolucion IS 'Fecha en que se debe devolver el libro';
COMMENT ON COLUMN prestamos.estado IS 'Estado del préstamo: ACTIVO, DEVUELTO, VENCIDO';

-- =====================================================
-- ÍNDICES PARA OPTIMIZAR CONSULTAS
-- =====================================================

-- Índices para la tabla usuarios
CREATE INDEX idx_usuarios_correo ON usuarios(correo);
CREATE INDEX idx_usuarios_rol ON usuarios(rol);

-- Índices para la tabla libros
CREATE INDEX idx_libros_titulo ON libros(titulo);
CREATE INDEX idx_libros_autor ON libros(autor);
CREATE INDEX idx_libros_categoria ON libros(categoria);
CREATE INDEX idx_libros_stock ON libros(stock);

-- Índices para la tabla prestamos
CREATE INDEX idx_prestamos_usuario ON prestamos(id_usuario);
CREATE INDEX idx_prestamos_libro ON prestamos(id_libro);
CREATE INDEX idx_prestamos_estado ON prestamos(estado);
CREATE INDEX idx_prestamos_fecha_prestamo ON prestamos(fecha_prestamo);
CREATE INDEX idx_prestamos_fecha_devolucion ON prestamos(fecha_devolucion);

-- =====================================================
-- DATOS DE PRUEBA
-- =====================================================

-- Insertar usuarios de prueba
INSERT INTO usuarios (nombre, correo, contraseña, rol) VALUES
('Juan Pérez', 'juan.perez@email.com', 'password123', 'USUARIO');

INSERT INTO usuarios (nombre, correo, contraseña, rol) VALUES
('María García', 'maria.garcia@email.com', 'password123', 'USUARIO');

INSERT INTO usuarios (nombre, correo, contraseña, rol) VALUES
('Carlos López', 'carlos.lopez@biblioteca.com', 'admin123', 'BIBLIOTECARIO');

-- Insertar libros de prueba
INSERT INTO libros (titulo, autor, categoria, stock) VALUES
('El Señor de los Anillos', 'J.R.R. Tolkien', 'Fantasía', 5);

INSERT INTO libros (titulo, autor, categoria, stock) VALUES
('Cien años de soledad', 'Gabriel García Márquez', 'Realismo Mágico', 3);

INSERT INTO libros (titulo, autor, categoria, stock) VALUES
('Don Quijote de la Mancha', 'Miguel de Cervantes', 'Novela', 4);

INSERT INTO libros (titulo, autor, categoria, stock) VALUES
('1984', 'George Orwell', 'Ciencia Ficción', 2);

INSERT INTO libros (titulo, autor, categoria, stock) VALUES
('El Principito', 'Antoine de Saint-Exupéry', 'Literatura Infantil', 6);

-- =====================================================
-- VISTAS ÚTILES
-- =====================================================

-- Vista para libros disponibles
CREATE OR REPLACE VIEW v_libros_disponibles AS
SELECT id, titulo, autor, categoria, stock
FROM libros
WHERE stock > 0
ORDER BY titulo;

-- Vista para préstamos con información completa
CREATE OR REPLACE VIEW v_prestamos_completos AS
SELECT 
    p.id,
    p.id_usuario,
    p.id_libro,
    p.fecha_prestamo,
    p.fecha_devolucion,
    p.estado,
    u.nombre as usuario_nombre,
    u.correo as usuario_correo,
    u.rol as usuario_rol,
    l.titulo as libro_titulo,
    l.autor as libro_autor,
    l.categoria as libro_categoria,
    CASE 
        WHEN p.estado = 'ACTIVO' AND p.fecha_devolucion < SYSDATE 
        THEN SYSDATE - p.fecha_devolucion 
        ELSE 0 
    END as dias_vencido
FROM prestamos p
JOIN usuarios u ON p.id_usuario = u.id
JOIN libros l ON p.id_libro = l.id;

-- Vista para préstamos vencidos
CREATE OR REPLACE VIEW v_prestamos_vencidos AS
SELECT *
FROM v_prestamos_completos
WHERE estado = 'ACTIVO' AND fecha_devolucion < SYSDATE
ORDER BY fecha_devolucion;

-- =====================================================
-- VERIFICACIÓN
-- =====================================================

-- Verificar que las tablas se crearon correctamente
SELECT table_name, tablespace_name FROM user_tables WHERE table_name IN ('USUARIOS', 'LIBROS', 'PRESTAMOS');

-- Verificar las vistas
SELECT view_name FROM user_views WHERE view_name LIKE 'V_%';

-- Verificar los índices
SELECT index_name, table_name FROM user_indexes WHERE table_name IN ('USUARIOS', 'LIBROS', 'PRESTAMOS');

-- Mostrar datos de prueba
SELECT 'Usuarios creados:' as info, COUNT(*) as cantidad FROM usuarios
UNION ALL
SELECT 'Libros creados:', COUNT(*) FROM libros
UNION ALL
SELECT 'Préstamos creados:', COUNT(*) FROM prestamos;

-- =====================================================
-- INSTRUCCIONES DE EJECUCIÓN
-- =====================================================

/*
Para ejecutar este script:

1. Conectar a Oracle:
   sqlplus usuario/password@database

2. Ejecutar el script:
   @crear_tablas_biblioteca.sql

3. Verificar la creación:
   SELECT table_name FROM user_tables WHERE table_name IN ('USUARIOS', 'LIBROS', 'PRESTAMOS');

4. Después de crear las tablas, ejecutar el script de procedimientos:
   @biblioteca_procedures.sql
*/ 